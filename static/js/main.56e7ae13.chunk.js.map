{"version":3,"sources":["imports/assets/assets.js","assets/icons/add.svg","assets/icons/edit.svg","assets/icons/delete.svg","assets/icons/close.svg","assets/icons/check.svg","assets/icons/arrow_expand.svg","assets/images/image_delete.png","components/header/Header.js","components/list/List.js","components/main/Main.js","imports/utils/utils.js","components/dialog/Dialog.js","components/footer/Footer.js","App.js","i18n.js","index.js"],"names":["assets","iconAdd","iconEdit","iconDelete","iconClose","iconCheck","iconExpand","imageDelete","Header","props","onOpen","setDialogType","t","useTranslation","id","src","alt","className","hasArrow","label","size","onClick","List","reminders","setCurrentReminder","map","currentReminder","i","borderWidth","borderRadius","overflow","p","fontWeight","as","lineHeight","isTruncated","title","description","Main","replaceReminders","setReminders","value","prevState","deleteReminder","filter","element","utils","handleLanguageChange","i18n","changeLanguage","saveLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","parse","getItem","isLocalStorageFull","saveReminder","inputs","newReminder","uuidv4","current","editReminder","Dialog","isOpen","onClose","dialogType","toast","useToast","createRef","ModalTitle","ModalDescription","mb","ref","placeholder","defaultValue","name","Buttons","colorScheme","mr","status","duration","isClosable","variant","Footer","useDisclosure","placement","display","alignItems","justifyContent","maxW","onChange","event","target","App","useState","theme","extendTheme","components","Button","baseStyle","_focus","boxShadow","useEffect","length","resources","it","translation","en","translationEN","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","err","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56e7ae13.chunk.js","sourcesContent":["import iconAdd from \"./../../assets/icons/add.svg\";\r\nimport iconEdit from \"./../../assets/icons/edit.svg\";\r\nimport iconDelete from \"./../../assets/icons/delete.svg\";\r\nimport iconClose from \"./../../assets/icons/close.svg\";\r\nimport iconCheck from \"./../../assets/icons/check.svg\";\r\nimport iconExpand from \"./../../assets/icons/arrow_expand.svg\";\r\n\r\nimport imageDelete from \"./../../assets/images/image_delete.png\";\r\n\r\nconst assets = {\r\n  iconAdd,\r\n  iconEdit,\r\n  iconDelete,\r\n  iconClose,\r\n  iconCheck,\r\n  iconExpand,\r\n  imageDelete,\r\n};\r\n\r\nexport default assets;\r\n","export default __webpack_public_path__ + \"static/media/add.f5cb0175.svg\";","export default __webpack_public_path__ + \"static/media/edit.836bf5af.svg\";","export default __webpack_public_path__ + \"static/media/delete.32d3c050.svg\";","export default __webpack_public_path__ + \"static/media/close.0457859b.svg\";","export default __webpack_public_path__ + \"static/media/check.b4c37d1e.svg\";","export default __webpack_public_path__ + \"static/media/arrow_expand.94e7b265.svg\";","export default __webpack_public_path__ + \"static/media/image_delete.7da827fb.png\";","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { IconButton, Tooltip } from \"@chakra-ui/react\";\r\n\r\nimport assets from \"./../../imports/assets/assets\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = (props) => {\r\n  const { onOpen, setDialogType } = props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <header id=\"header\">\r\n      <div id=\"header-content\">\r\n        <h1 id=\"title\">\r\n          <img src={assets.iconCheck} alt=\"\" className=\"icon\" /> To-Do\r\n        </h1>\r\n\r\n        <Tooltip hasArrow label={t(\"tooltip_add_memo\")} aria-label=\"A tooltip\">\r\n          <IconButton\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              setDialogType(\"add\");\r\n              onOpen();\r\n            }}\r\n          >\r\n            <img src={assets.iconAdd} alt=\"\" className=\"icon\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport \"./List.scss\";\r\n\r\nconst List = (props) => {\r\n  const { onOpen, reminders, setCurrentReminder, setDialogType } = props;\r\n\r\n  return (\r\n    <ul id=\"memo-list\">\r\n      {reminders.map((currentReminder, i) => (\r\n        <li\r\n          key={i}\r\n          className=\"memo-element\"\r\n          onClick={() => {\r\n            setCurrentReminder(currentReminder);\r\n            setDialogType(\"view\");\r\n            onOpen();\r\n          }}\r\n        >\r\n          <Box borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" p=\"4\">\r\n            <Box fontWeight=\"semibold\" as=\"h4\" lineHeight=\"tight\" isTruncated>\r\n              {currentReminder.title}\r\n            </Box>\r\n\r\n            <Box>{currentReminder.description}</Box>\r\n          </Box>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default List;\r\n","import React from \"react\";\r\nimport List from \"./../list/List\";\r\nimport \"./Main.scss\";\r\n\r\nconst Main = (props) => {\r\n  const { onOpen, reminders, setCurrentReminder, setDialogType } = props;\r\n\r\n  return (\r\n    <main id=\"main\">\r\n      <div id=\"main-content\">\r\n        <List\r\n          onOpen={onOpen}\r\n          reminders={reminders}\r\n          setCurrentReminder={setCurrentReminder}\r\n          setDialogType={setDialogType}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\nexport default Main;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\n/* --------------------------------------- */\r\n/* ----- LANGUAGE HANDLING FUNCTIONS ----- */\r\n/* --------------------------------------- */\r\nconst handleLanguageChange = (i18n, value) => {\r\n  i18n.changeLanguage(value);\r\n};\r\n\r\n/* --------------------------------------- */\r\n/* ------- LOCAL STORAGE FUNCTIONS ------- */\r\n/* --------------------------------------- */\r\nconst saveLocalStorage = (reminders) => {\r\n  localStorage.setItem(\"reminders\", JSON.stringify(reminders));\r\n};\r\n\r\nconst getLocalStorage = () => {\r\n  return JSON.parse(localStorage.getItem(\"reminders\"));\r\n};\r\n\r\nconst isLocalStorageFull = () => {\r\n  return localStorage.getItem(\"reminders\") != null;\r\n};\r\n\r\n/* --------------------------------------- */\r\n/* ------- MEMO HANDLING FUNCTIONS ------- */\r\n/* --------------------------------------- */\r\n\r\nconst replaceReminders = (setReminders, value) => {\r\n  setReminders((prevState) => [value, ...prevState]);\r\n};\r\n\r\nconst saveReminder = (inputs, reminders, setReminders) => {\r\n  const newReminder = {\r\n    id: uuidv4(),\r\n    title: inputs.title.current.value,\r\n    description: inputs.description.current.value,\r\n  };\r\n\r\n  replaceReminders(setReminders, newReminder);\r\n};\r\n\r\nconst deleteReminder = (reminders, setReminders, currentReminder) => {\r\n  setReminders(\r\n    reminders.filter((element) => element.id !== currentReminder.id)\r\n  );\r\n};\r\n\r\nconst editReminder = (reminders, setReminders, currentReminder, inputs) => {\r\n  const newReminder = {\r\n    id: currentReminder.id,\r\n    title: inputs.title.current.value,\r\n    description: inputs.description.current.value,\r\n  };\r\n\r\n  deleteReminder(reminders, setReminders, currentReminder);\r\n  replaceReminders(setReminders, newReminder);\r\n};\r\n\r\nconst utils = {\r\n  handleLanguageChange,\r\n  saveLocalStorage,\r\n  getLocalStorage,\r\n  isLocalStorageFull,\r\n  replaceReminders,\r\n  saveReminder,\r\n  editReminder,\r\n  deleteReminder,\r\n};\r\n\r\nexport default utils;\r\n","import React, { createRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Input,\r\n  Textarea,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport assets from \"./../../imports/assets/assets\";\r\nimport utils from \"./../../imports/utils/utils\";\r\nimport \"./Dialog.scss\";\r\n\r\nconst Dialog = (props) => {\r\n  const {\r\n    isOpen,\r\n    onOpen,\r\n    onClose,\r\n    currentReminder,\r\n    reminders,\r\n    setReminders,\r\n    dialogType,\r\n    setDialogType,\r\n  } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const toast = useToast();\r\n  const inputs = {\r\n    title: createRef(),\r\n    description: createRef(),\r\n  };\r\n\r\n  const ModalTitle = (props) => {\r\n    return props.dialogType === \"add\" ? (\r\n      <h2 className=\"h2\">{t(\"add_memo\")}</h2>\r\n    ) : props.dialogType === \"view\" ? (\r\n      <h2 className=\"h2\">{currentReminder.title}</h2>\r\n    ) : props.dialogType === \"edit\" ? (\r\n      <h2 className=\"h2\">{t(\"edit_memo\")}</h2>\r\n    ) : (\r\n      <h2 className=\"h2\">{t(\"delete_memo\")}</h2>\r\n    );\r\n  };\r\n\r\n  const ModalDescription = (props) => {\r\n    return props.dialogType === \"add\" ? (\r\n      <>\r\n        <Input mb={4} ref={inputs.title} placeholder={t(\"memo_title\")} />\r\n        <Textarea\r\n          ref={inputs.description}\r\n          placeholder={t(\"memo_description\")}\r\n        />\r\n      </>\r\n    ) : props.dialogType === \"view\" ? (\r\n      <p className=\"text\">{currentReminder.description}</p>\r\n    ) : props.dialogType === \"edit\" ? (\r\n      <>\r\n        <Input ref={inputs.title} mb={4} defaultValue={currentReminder.title} />\r\n        <Textarea\r\n          ref={inputs.description}\r\n          defaultValue={currentReminder.description}\r\n        />\r\n      </>\r\n    ) : (\r\n      <div className=\"description\">\r\n        <img src={assets.imageDelete} alt=\"\" className=\"image\" />\r\n        <p className=\"text\">\r\n          {t(\"delete_confirmation\", { name: currentReminder.title })}\r\n        </p>\r\n        <p className=\"text\">{t(\"delete_info\")}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const Buttons = (props) => {\r\n    return (\r\n      <>\r\n        {props.dialogType === \"add\" ? (\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            mr={3}\r\n            onClick={() => {\r\n              utils.saveReminder(inputs, reminders, setReminders);\r\n              toast({\r\n                title: \"Memo created\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n              });\r\n              onClose();\r\n            }}\r\n          >\r\n            {\" \"}\r\n            {t(\"button_add\")}\r\n          </Button>\r\n        ) : props.dialogType === \"view\" ? (\r\n          <>\r\n            <Button\r\n              colorScheme=\"blue\"\r\n              mr={3}\r\n              onClick={() => {\r\n                setDialogType(\"edit\");\r\n                onOpen();\r\n              }}\r\n            >\r\n              {t(\"button_edit\")}\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              mr={3}\r\n              onClick={() => {\r\n                setDialogType(\"delete\");\r\n                onOpen();\r\n              }}\r\n            >\r\n              {t(\"button_delete\")}\r\n            </Button>\r\n          </>\r\n        ) : props.dialogType === \"edit\" ? (\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            mr={3}\r\n            onClick={() => {\r\n              utils.editReminder(\r\n                reminders,\r\n                setReminders,\r\n                currentReminder,\r\n                inputs\r\n              );\r\n              toast({\r\n                title: \"Memo edited\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n              });\r\n              onClose();\r\n            }}\r\n          >\r\n            {t(\"button_confirm\")}\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            colorScheme=\"red\"\r\n            mr={3}\r\n            onClick={() => {\r\n              utils.deleteReminder(reminders, setReminders, currentReminder);\r\n              toast({\r\n                title: \"Memo deleted\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n              });\r\n              onClose();\r\n            }}\r\n          >\r\n            {t(\"button_delete\")}\r\n          </Button>\r\n        )}\r\n        <Button variant=\"ghost\" onClick={onClose}>\r\n          {t(\"button_cancel\")}\r\n        </Button>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>\r\n          <ModalTitle dialogType={dialogType} />\r\n        </ModalHeader>\r\n        <ModalCloseButton />\r\n\r\n        <ModalBody>\r\n          <ModalDescription dialogType={dialogType} />\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Buttons dialogType={dialogType} />\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\nexport default Dialog;\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  Select,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  DrawerBody,\r\n  useDisclosure,\r\n  IconButton,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport assets from \"./../../imports/assets/assets\";\r\nimport utils from \"./../../imports/utils/utils\";\r\n\r\nimport \"./Footer.scss\";\r\n\r\nconst Footer = (props) => {\r\n  const { i18n } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <footer id=\"footer\">\r\n      <Tooltip\r\n        hasArrow\r\n        label={t(\"tooltip_select_language\")}\r\n        aria-label=\"A tooltip\"\r\n      >\r\n        <IconButton size=\"sm\" onClick={onOpen}>\r\n          <img src={assets.iconExpand} alt=\"\" className=\"icon\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n\r\n      <Drawer isOpen={isOpen} placement=\"bottom\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerCloseButton />\r\n          <DrawerBody\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Select\r\n              maxW=\"200\"\r\n              placeholder={t(\"select_language\")}\r\n              onChange={(event) => {\r\n                utils.handleLanguageChange(i18n, event.target.value);\r\n              }}\r\n            >\r\n              <option value=\"it\">{t(\"language_it\")}</option>\r\n              <option value=\"en\">{t(\"language_en\")}</option>\r\n            </Select>\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ChakraProvider, useDisclosure, extendTheme } from \"@chakra-ui/react\";\r\nimport Header from \"./components/header/Header\";\r\nimport Main from \"./components/main/Main\";\r\nimport Dialog from \"./components/dialog/Dialog\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport utils from \"./imports/utils/utils\";\r\n\r\nfunction App() {\r\n  const { i18n } = useTranslation();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [reminders, setReminders] = useState(\r\n    utils.isLocalStorageFull() ? utils.getLocalStorage() : []\r\n  );\r\n  const [currentReminder, setCurrentReminder] = useState();\r\n  const [dialogType, setDialogType] = useState();\r\n  const theme = extendTheme({\r\n    components: {\r\n      Button: {\r\n        baseStyle: {\r\n          _focus: { boxShadow: \"none\" },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    reminders.length > 0 && utils.saveLocalStorage(reminders);\r\n  }, [reminders]);\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      {isOpen && (\r\n        <Dialog\r\n          isOpen={isOpen}\r\n          onOpen={onOpen}\r\n          onClose={onClose}\r\n          currentReminder={currentReminder}\r\n          reminders={reminders}\r\n          setReminders={setReminders}\r\n          dialogType={dialogType}\r\n          setDialogType={setDialogType}\r\n        />\r\n      )}\r\n      <Header onOpen={onOpen} setDialogType={setDialogType} />\r\n      <Main\r\n        onOpen={onOpen}\r\n        reminders={reminders}\r\n        setCurrentReminder={setCurrentReminder}\r\n        setDialogType={setDialogType}\r\n      />\r\n      <Footer i18n={i18n} />\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport translationEN from \"./imports/locales/en/translation.json\";\r\nimport translationIT from \"./imports/locales/it/translation.json\";\r\n\r\nconst resources = {\r\n  it: { translation: translationIT },\r\n  en: { translation: translationEN },\r\n};\r\n\r\ni18n.use(initReactI18next).init(\r\n  {\r\n    resources,\r\n    lng: \"it\",\r\n    fallbackLng: \"en\",\r\n    interpolation: { escapeValue: false },\r\n  },\r\n  (err, t) => {\r\n    err && console.log(err);\r\n  }\r\n);\r\n\r\nexport default i18n;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}